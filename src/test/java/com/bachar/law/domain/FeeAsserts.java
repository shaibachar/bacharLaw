package com.bachar.law.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FeeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeeAllPropertiesEquals(Fee expected, Fee actual) {
        assertFeeAutoGeneratedPropertiesEquals(expected, actual);
        assertFeeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeeAllUpdatablePropertiesEquals(Fee expected, Fee actual) {
        assertFeeUpdatableFieldsEquals(expected, actual);
        assertFeeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeeAutoGeneratedPropertiesEquals(Fee expected, Fee actual) {
        assertThat(actual)
            .as("Verify Fee auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeeUpdatableFieldsEquals(Fee expected, Fee actual) {
        assertThat(actual)
            .as("Verify Fee relevant properties")
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()))
            .satisfies(a -> assertThat(a.getAdjustedValue()).as("check adjustedValue").isEqualTo(expected.getAdjustedValue()))
            .satisfies(a -> assertThat(a.getAdjustedValuePlus()).as("check adjustedValuePlus").isEqualTo(expected.getAdjustedValuePlus()))
            .satisfies(a -> assertThat(a.getAmount()).as("check amount").isEqualTo(expected.getAmount()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getValue()).as("check value").isEqualTo(expected.getValue()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeeUpdatableRelationshipsEquals(Fee expected, Fee actual) {
        assertThat(actual)
            .as("Verify Fee relationships")
            .satisfies(a -> assertThat(a.getLinkedFees()).as("check linkedFees").isEqualTo(expected.getLinkedFees()))
            .satisfies(a -> assertThat(a.getLinkedTos()).as("check linkedTos").isEqualTo(expected.getLinkedTos()))
            .satisfies(a -> assertThat(a.getClient()).as("check client").isEqualTo(expected.getClient()))
            .satisfies(a -> assertThat(a.getAgreement()).as("check agreement").isEqualTo(expected.getAgreement()));
    }
}
