package com.bachar.law.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClientHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientHistoryAllPropertiesEquals(ClientHistory expected, ClientHistory actual) {
        assertClientHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertClientHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientHistoryAllUpdatablePropertiesEquals(ClientHistory expected, ClientHistory actual) {
        assertClientHistoryUpdatableFieldsEquals(expected, actual);
        assertClientHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientHistoryAutoGeneratedPropertiesEquals(ClientHistory expected, ClientHistory actual) {
        assertThat(actual)
            .as("Verify ClientHistory auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientHistoryUpdatableFieldsEquals(ClientHistory expected, ClientHistory actual) {
        assertThat(actual)
            .as("Verify ClientHistory relevant properties")
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getDate()).as("check date").isEqualTo(expected.getDate()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getSubType()).as("check subType").isEqualTo(expected.getSubType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientHistoryUpdatableRelationshipsEquals(ClientHistory expected, ClientHistory actual) {
        assertThat(actual)
            .as("Verify ClientHistory relationships")
            .satisfies(a -> assertThat(a.getClient()).as("check client").isEqualTo(expected.getClient()));
    }
}
